import streamlit as st
import requests
from datetime import datetime
import time
import pandas as pd
import matplotlib
matplotlib.use('Agg')  
import matplotlib.pyplot as plt
import base64
from io import BytesIO
from fpdf import FPDF
import tempfile

st.set_page_config(
    page_title="Gesti√≥n de Seguridad y Salud en el Trabajo",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL del backend
BACKEND_URL = "http://localhost:8000"

# Estado de la sesi√≥n
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'token' not in st.session_state:
    st.session_state.token = None
if 'user_info' not in st.session_state:
    st.session_state.user_info = {}
if 'current_page' not in st.session_state:
    st.session_state.current_page = "inicio"
if 'empresa_actual' not in st.session_state:
    st.session_state.empresa_actual = None
if 'preguntas_verificacion' not in st.session_state:
    st.session_state.preguntas_verificacion = {}
if 'previous_page' not in st.session_state:
    st.session_state.previous_page = None

# Colores principales seg√∫n la imagen
COLORES = {
    "verde_bosque": "#006b3f",
    "verde_hierba": "#6bbe44",
    "gris_claro": "#f2f2f2",
    "gris_oscuro": "#333333",
    "negro": "#1a1a1a",
    "blanco": "#ffffff"
}

# Estilos CSS personalizados con la paleta de colores proporcionada
def load_css():
    st.markdown(f"""
    <style>
        :root {{
            --primary: {COLORES["verde_bosque"]};
            --secondary: {COLORES["verde_hierba"]};
            --accent: {COLORES["verde_hierba"]};
            --background: {COLORES["gris_claro"]};
            --text: {COLORES["negro"]};
            --header-text: {COLORES["blanco"]};
        }}
        
        body {{
            background-color: var(--background);
            color: var(--text);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }}
        
        .stApp {{
            background: {COLORES["gris_claro"]};
        }}
        
        .header {{
            background-color: {COLORES["verde_bosque"]};
            color: {COLORES["blanco"]};
            padding: 1rem;
            margin-bottom: 2rem;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }}
        
        .header-title {{
            color: {COLORES["blanco"]};
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }}
        
        .header-subtitle {{
            color: {COLORES["blanco"]};
            font-size: 1.1rem;
            opacity: 0.9;
        }}
        
        .stButton>button {{
            background-color: var(--primary);
            color: white;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            border: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }}
        
        .stButton>button:hover {{
            background-color: var(--accent);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }}
        
        .back-button {{
            background-color: {COLORES["gris_claro"]} !important;
            color: var(--primary) !important;
            border: 1px solid var(--primary) !important;
        }}
        
        .back-button:hover {{
            background-color: #e8f5e9 !important;
        }}
        
        .stTextInput>div>div>input, 
        .stTextArea>div>div>textarea, 
        .stSelectbox>div>div>select,
        .stNumberInput>div>div>input {{
            border-radius: 8px;
            border: 1px solid {COLORES["verde_hierba"]};
            padding: 0.5rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        }}
        
        .sidebar .sidebar-content {{
            background-color: var(--primary);
            color: white;
            padding: 1rem;
        }}
        
        h1, h2, h3, h4 {{
            color: var(--primary);
            margin-top: 0;
        }}
        
        .custom-card {{
            background-color: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            border-left: 4px solid var(--accent);
        }}
        
        .pregunta-card {{
            background-color: #f8f9fa;
            border-left: 4px solid {COLORES["verde_hierba"]};
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }}
        
        .pregunta-card:hover {{
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }}
        
        .pregunta-header {{
            color: {COLORES["verde_bosque"]};
            font-weight: 600;
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
        }}
        
        .normativa-text {{
            font-size: 0.85rem;
            color: #666;
            font-style: italic;
            margin-bottom: 0.5rem;
        }}
        
        .gestion-text {{
            font-size: 0.9rem;
            font-weight: 500;
            color: {COLORES["verde_bosque"]};
            margin-bottom: 0.5rem;
        }}
        
        .observaciones-box {{
            background-color: #fff8e1;
            border-radius: 6px;
            padding: 0.75rem;
            margin-top: 0.75rem;
            border-left: 3px solid #FFC107;
        }}
        
        .success {{ color: {COLORES["verde_bosque"]}; }}
        .warning {{ color: #FF8F00; }}
        .error {{ color: #C62828; }}
        
        .stRadio>div>label {{
            margin-right: 1rem;
        }}
        
        .st-expander {{
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }}
        
        .st-expander .streamlit-expanderHeader {{
            font-weight: 600;
            color: var(--primary);
        }}
        
        .metric-card {{
            background-color: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1rem;
            border-left: 4px solid var(--accent);
        }}
        
        .verification-table {{
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1rem;
        }}
        
        .verification-table th {{
            background-color: {COLORES["verde_bosque"]};
            color: white;
            padding: 0.5rem;
            text-align: left;
        }}
        
        .verification-table td {{
            padding: 0.5rem;
            border: 1px solid #ddd;
        }}
        
        .verification-table tr:nth-child(even) {{
            background-color: #f2f2f2;
        }}
        
        .planes-section {{
            background-color: {COLORES["gris_claro"]};
            padding: 2rem;
            border-radius: 10px;
            margin-top: 2rem;
            text-align: center;
        }}
        
        .planes-title {{
            color: {COLORES["verde_bosque"]};
            font-size: 1.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }}
        
        .planes-subtitle {{
            color: {COLORES["negro"]};
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
        }}
        
        .plan-card {{
            background-color: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin: 1rem;
            border-top: 4px solid {COLORES["verde_hierba"]};
            transition: all 0.3s ease;
        }}
        
        .plan-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }}
        
        .plan-name {{
            color: {COLORES["verde_bosque"]};
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }}
        
        .plan-price {{
            color: {COLORES["verde_hierba"]};
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }}
        
        .plan-features {{
            text-align: left;
            margin-bottom: 1.5rem;
        }}
        
        .feature-item {{
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }}
        
        .feature-icon {{
            color: {COLORES["verde_hierba"]};
            margin-right: 0.5rem;
        }}
    </style>
    """, unsafe_allow_html=True)

load_css()

def show_header():
    st.markdown(f"""
    <div class="header">
        <div class="header-title">GESTI√ìN DE SEGURIDAD Y SALUD EN EL TRABAJO</div>
        <div class="header-subtitle">CONSULTA NUESTROS PLANES EMPRESARIALES Y PREMIUM</div>
        <div class="header-subtitle">PARA EMPRESAS PEQUE√ëAS, MEDIANAS Y GRANDES CON TODO TIPO DE MESSOS.</div>
    </div>
    """, unsafe_allow_html=True)

def go_back():
    if st.session_state.previous_page:
        st.session_state.current_page = st.session_state.previous_page
        st.rerun()
    else:
        st.session_state.current_page = "dashboard"
        st.rerun()

# P√°gina de inicio de sesi√≥n
def login_page():
    show_header()
    
    st.markdown("### Desaf√≠o")
    st.markdown("""
    Bienvenido al sistema de gesti√≥n de seguridad y salud en el trabajo. 
    Por favor inicie sesi√≥n para acceder a todas las funcionalidades.
    """)
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.image("https://via.placeholder.com/300x200?text=Logo+Empresa", width=250)
    
    with col2:
        with st.form("login_form"):
            cedula = st.text_input("C√©dula", placeholder="Ingrese su n√∫mero de c√©dula", key="cedula_input")
            password = st.text_input("Contrase√±a", type="password", placeholder="Ingrese su contrase√±a", key="password_input")
            submit_button = st.form_submit_button("Iniciar Sesi√≥n", type="primary")
            
            if submit_button:
                try:
                    response = requests.post(
                        f"{BACKEND_URL}/token",
                        data={"username": cedula, "password": password},
                        headers={"Content-Type": "application/x-www-form-urlencoded"}
                    )
                    if response.status_code == 200:
                        data = response.json()
                        st.session_state.logged_in = True
                        st.session_state.token = data["access_token"]
                        st.session_state.user_info = {
                            "nombre": data["nombre"],
                            "cedula": cedula,
                            "rol": data.get("rol", "inspector")
                        }
                        st.session_state.current_page = "dashboard"
                        st.rerun()
                    else:
                        st.error("C√©dula o contrase√±a incorrecta")
                except requests.exceptions.RequestException as e:
                    st.error(f"Error al conectar con el servidor: {str(e)}")

# P√°gina principal
def dashboard_page():
    show_header()
    
    st.sidebar.title("Men√∫ Principal")
    st.sidebar.markdown(f"""
    **Usuario:** {st.session_state.user_info['nombre']}  
    **Rol:** {st.session_state.user_info['rol'].capitalize()}
    """)
    
    menu_options = {
        "üè† Inicio": "dashboard",
        "üè¢ Gesti√≥n de Empresas": "gestion_empresas",
        "üìã Formulario de Verificaci√≥n": "formulario_verificacion",
        "üìä Reportes y Estad√≠sticas": "reportes"
    }
    
    for option, page in menu_options.items():
        if st.sidebar.button(option, key=f"menu_{page}"):
            st.session_state.previous_page = st.session_state.current_page
            st.session_state.current_page = page
            st.rerun()
    
    if st.sidebar.button("üîí Cerrar Sesi√≥n", type="primary"):
        st.session_state.logged_in = False
        st.session_state.token = None
        st.session_state.current_page = "inicio"
        st.rerun()
    
    st.title(f"Bienvenido, {st.session_state.user_info['nombre']}")
    st.markdown("---")
    
    st.markdown("""
    ### Sistema Integral de Gesti√≥n de Seguridad y Salud en el Trabajo
    
    Ofrecemos soluciones completas para la gesti√≥n y verificaci√≥n del cumplimiento 
    de normativas de seguridad en el ambiente laboral para empresas de todos los tama√±os.
    """)
    
    # Secci√≥n de planes empresariales
    st.markdown("""
    <div class="planes-section">
        <div class="planes-title">NUESTROS PLANES EMPRESARIALES</div>
        <div class="planes-subtitle">Soluciones adaptadas a las necesidades de su empresa</div>
        
        <div style="display: flex; justify-content: center; flex-wrap: wrap;">
            <div class="plan-card" style="flex: 1; min-width: 300px;">
                <div class="plan-name">PLAN B√ÅSICO</div>
                <div class="plan-price">$99/mes</div>
                <div class="plan-features">
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Hasta 10 trabajadores</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Gesti√≥n documental b√°sica</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Soporte por correo</div>
                </div>
                <button class="stButton">Contratar</button>
            </div>
            
            <div class="plan-card" style="flex: 1; min-width: 300px;">
                <div class="plan-name">PLAN EMPRESARIAL</div>
                <div class="plan-price">$199/mes</div>
                <div class="plan-features">
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Hasta 50 trabajadores</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Gesti√≥n documental completa</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Soporte prioritario</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Informes mensuales</div>
                </div>
                <button class="stButton">Contratar</button>
            </div>
            
            <div class="plan-card" style="flex: 1; min-width: 300px;">
                <div class="plan-name">PLAN PREMIUM</div>
                <div class="plan-price">$399/mes</div>
                <div class="plan-features">
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Trabajadores ilimitados</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Gesti√≥n integral</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Soporte 24/7</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Auditor√≠as peri√≥dicas</div>
                    <div class="feature-item"><span class="feature-icon">‚úì</span> Capacitaciones incluidas</div>
                </div>
                <button class="stButton">Contratar</button>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

load_css()

def go_back():
    if st.session_state.previous_page:
        st.session_state.current_page = st.session_state.previous_page
        st.rerun()
    else:
        st.session_state.current_page = "dashboard"
        st.rerun()

# P√°gina de inicio de sesi√≥n
def login_page():
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.image("https://via.placeholder.com/300x200?text=SESACO+Logo", width=250)
    
    with col2:
        st.title("SESACO - Seguridad Industrial S.A.")
        st.markdown("---")
        
        with st.form("login_form"):
            cedula = st.text_input("C√©dula", placeholder="1722212253", key="cedula_input")
            password = st.text_input("Contrase√±a", type="password", placeholder="1722212253", key="password_input")
            submit_button = st.form_submit_button("Iniciar Sesi√≥n", type="primary")
            
            if submit_button:
                try:
                    response = requests.post(
                        f"{BACKEND_URL}/token",
                        data={"username": cedula, "password": password},
                        headers={"Content-Type": "application/x-www-form-urlencoded"}
                    )
                    if response.status_code == 200:
                        data = response.json()
                        st.session_state.logged_in = True
                        st.session_state.token = data["access_token"]
                        st.session_state.user_info = {
                            "nombre": data["nombre"],
                            "cedula": cedula,
                            "rol": data.get("rol", "inspector")
                        }
                        st.session_state.current_page = "dashboard"
                        st.rerun()
                    else:
                        st.error("C√©dula o contrase√±a incorrecta")
                except requests.exceptions.RequestException as e:
                    st.error(f"Error al conectar con el servidor: {str(e)}")

# P√°gina principal
def dashboard_page():
    st.sidebar.title("Men√∫ Principal")
    st.sidebar.markdown(f"""
    **Usuario:** {st.session_state.user_info['nombre']}  
    **Rol:** {st.session_state.user_info['rol'].capitalize()}
    """)
    
    menu_options = {
        "üè† Inicio": "dashboard",
        "üè¢ Gesti√≥n de Empresas": "gestion_empresas",
        "üìã Formulario de Verificaci√≥n": "formulario_verificacion",
        "üìä Reportes y Estad√≠sticas": "reportes"
    }
    
    for option, page in menu_options.items():
        if st.sidebar.button(option, key=f"menu_{page}"):
            st.session_state.previous_page = st.session_state.current_page
            st.session_state.current_page = page
            st.rerun()
    
    if st.sidebar.button("üîí Cerrar Sesi√≥n", type="primary"):
        st.session_state.logged_in = False
        st.session_state.token = None
        st.session_state.current_page = "inicio"
        st.rerun()
    
    st.title(f"Bienvenido, {st.session_state.user_info['nombre']}")
    st.markdown("---")
    
    st.markdown("""
    ### Sistema Integral de Verificaci√≥n de Seguridad Industrial
    
    **SESACO Seguridad Industrial S.A.** ofrece soluciones completas para la gesti√≥n y verificaci√≥n 
    del cumplimiento de normativas de seguridad en el ambiente laboral.
    """)
    
    # Tarjeta de m√©tricas
    with st.container():
        st.markdown("""
        <div class='custom-card'>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        col1.metric("Empresas Registradas", "28", "+3 este mes")
        col2.metric("Verificaciones", "156", "15% m√°s que el mes pasado")
        col3.metric("Cumplimiento Promedio", "82%", "5% mejor que el promedio")
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("### Acciones R√°pidas")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîç Buscar Empresa", use_container_width=True):
            st.session_state.previous_page = st.session_state.current_page
            st.session_state.current_page = "gestion_empresas"
            st.rerun()
    
    with col2:
        if st.button("üìù Nuevo Formulario", use_container_width=True):
            st.session_state.previous_page = st.session_state.current_page
            st.session_state.current_page = "formulario_verificacion"
            st.rerun()
    
    with col3:
        if st.button("üìä Generar Reporte", use_container_width=True):
            st.session_state.previous_page = st.session_state.current_page
            st.session_state.current_page = "reportes"
            st.rerun()

# Gesti√≥n de empresas
def gestion_empresas_page():
    if st.button("‚Üê Regresar", key="back_gestion", type="secondary", use_container_width=True, 
                help="Volver a la p√°gina anterior", on_click=go_back):
        return
    
    st.title("üè¢ Gesti√≥n de Empresas")
    st.markdown("---")
    
    tab1, tab2 = st.tabs(["üîç Buscar Empresa", "‚ûï Registrar Nueva Empresa"])
    
    with tab1:
        st.subheader("Buscar Empresa por RUC")
        ruc = st.text_input("Ingrese el RUC de la empresa", key="buscar_ruc")
        
        if st.button("Buscar", key="buscar_empresa_btn"):
            if ruc:
                try:
                    response = requests.get(
                        f"{BACKEND_URL}/empresas/{ruc}",
                        headers={"Authorization": f"Bearer {st.session_state.token}"}
                    )
                    if response.status_code == 200:
                        empresa = response.json()
                        st.session_state.empresa_actual = empresa
                        st.success("Empresa encontrada")
                    else:
                        st.warning("No se encontr√≥ una empresa con ese RUC")
                except requests.exceptions.RequestException:
                    st.error("Error al conectar con el servidor")
            else:
                st.warning("Por favor ingrese un RUC")
        
        if 'empresa_actual' in st.session_state and st.session_state.empresa_actual:
            display_empresa_info(st.session_state.empresa_actual)
    
    with tab2:
        st.subheader("Registrar Nueva Empresa")
        with st.form("empresa_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            
            with col1:
                inspeccion = st.text_input("Inspecci√≥n")
                fecha = st.date_input("Fecha")
                re_inspeccion = st.text_input("Re-inspecci√≥n", placeholder="Ej: L-V 01/01/2000")
                fecha_inspeccion = st.date_input("Fecha de Re-inspecci√≥n")
                fecha_informacion = st.text_input("Fecha M√°xima para remitir informaci√≥n", placeholder="Ej: L-V 01/01/2000")
                tipo_empresa = st.selectbox("Tipo de Empresa", ["Privada", "P√∫blica"])
                empleador = st.text_input("Empleador")
                razon_social = st.text_input("Raz√≥n Social*", help="Nombre legal de la empresa")
                ruc = st.text_input("RUC*", help="N√∫mero de RUC de 13 d√≠gitos")
                telefono = st.text_input("N√∫mero de Tel√©fono")
                correo = st.text_input("Correo Electr√≥nico")
                actividad_economica = st.text_input("Actividad Econ√≥mica Principal")
                
            with col2:
                tipo_centro = st.selectbox("Tipo de Centro de Trabajo*", ["Matriz", "Sucursal"])
                direccion = st.text_area("Direcci√≥n del Centro de Trabajo*")
                total_trabajadores = st.number_input("Total de Trabajadores/Servidores*", min_value=1, value=200)
                num_trabajadores_centro = st.number_input("N√∫mero de Trabajadores/Servidores del Centro de Trabajo*", min_value=1, value=10)
                consolidado_planilla = st.selectbox("Consolidado de Planilla IESS*", ["S√≠", "No"])
                
                st.subheader("Estad√≠sticas de Trabajadores", divider="green")
                col3, col4 = st.columns(2)
                with col3:
                    hombres = st.number_input("Hombres", min_value=0, value=0)
                    mujeres = st.number_input("Mujeres", min_value=0, value=0)
                    embarazadas = st.number_input("Embarazadas", min_value=0, value=0)
                    mujeres_en_lactancia = st.number_input("Mujeres en Lactancia", min_value=0, value=0)
                    extranjeros = st.number_input("Extranjeros", min_value=0, value=0)
                    adolescentes = st.number_input("Adolescentes", min_value=0, value=0)
                
                with col4:
                    teletrabajadores = st.number_input("Teletrabajadores", min_value=0, value=0)
                    ni√±os = st.number_input("Menores de edad", min_value=0, value=0)
                    adultos_mayores = st.number_input("Adultos Mayores", min_value=0, value=0)
                
                numeros_centros_abiertos = st.text_input("N√∫mero de Centros de Trabajo Abiertos")
                horario_trabajo = st.text_input("Horario de Trabajo Principal", placeholder="Ej: L-V 08:00-17:00")
                entrevistados = st.text_area("Personas Entrevistadas (separar por comas)").split(",")
                
            if st.form_submit_button("Registrar Empresa", type="primary"):
                if not all([ruc, razon_social, tipo_centro, direccion]):
                    st.error("Por favor complete los campos obligatorios (*)")
                else:
                    estadisticas = {
                        "hombres": hombres,
                        "mujeres": mujeres,
                        "embarazadas": embarazadas,
                        "teletrabajadores": teletrabajadores,
                        "ni√±os": ni√±os,
                        "adultos_mayores": adultos_mayores,
                        "mujeres_en_lactancia": mujeres_en_lactancia,
                        "extranjeros": extranjeros,
                        "adolescentes": adolescentes
                    }
                    
                    empresa_data = {
                        "inspeccion": inspeccion,
                        "fecha": str(fecha) if fecha else None,
                        "re_inspeccion": re_inspeccion,
                        "fecha_inspeccion": str(fecha_inspeccion) if fecha_inspeccion else None,
                        "fecha_informacion": fecha_informacion,
                        "tipo": tipo_empresa,
                        "empleador": empleador,
                        "razon_social": razon_social,
                        "ruc": ruc,
                        "telefono": telefono,
                        "correo": correo,
                        "actividad_economica": actividad_economica,
                        "tipo_centro": tipo_centro,
                        "direccion": direccion,
                        "total_trabajadores": total_trabajadores,
                        "num_trabajadores_centro": num_trabajadores_centro,
                        "consolidado_planilla": consolidado_planilla == "S√≠",
                        "estadisticas": estadisticas,
                        "horario_trabajo": horario_trabajo,
                        "entrevistados": [e.strip() for e in entrevistados if e.strip()],
                        "numeros_centros_abiertos": numeros_centros_abiertos
                    }
                    
                    try:
                        response = requests.post(
                            f"{BACKEND_URL}/empresas/",
                            json=empresa_data,
                            headers={"Authorization": f"Bearer {st.session_state.token}"}
                        )
                        if response.status_code == 200:
                            st.success("‚úÖ Empresa registrada exitosamente!")
                            time.sleep(2)
                            st.session_state.empresa_actual = response.json()
                            st.rerun()
                        else:
                            st.error(f"Error al registrar empresa: {response.text}")
                    except requests.exceptions.RequestException:
                        st.error("Error al conectar con el servidor")

def display_empresa_info(empresa):
    st.markdown(f"""
    <div class='custom-card'>
        <h3>üìã {empresa['razon_social']}</h3>
        <p><small>RUC: {empresa['ruc']} | Registrada el: {empresa['fecha_registro'].split('T')[0]}</small></p>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**Tipo:** {empresa['tipo']}")
        st.markdown(f"**Empleador:** {empresa['empleador']}")
        st.markdown(f"**Tel√©fono:** {empresa['telefono']}")
        st.markdown(f"**Correo:** {empresa['correo']}")
        st.markdown(f"**Actividad Econ√≥mica:** {empresa['actividad_economica']}")
        st.markdown(f"**Tipo de Centro:** {empresa['tipo_centro']}")
    
    with col2:
        st.markdown(f"**Direcci√≥n:** {empresa['direccion']}")
        st.markdown(f"**Total Trabajadores:** {empresa['total_trabajadores']}")
        st.markdown(f"**Planilla IESS:** {'S√≠' if empresa['consolidado_planilla'] else 'No'}")
        st.markdown(f"**Horario:** {empresa['horario_trabajo']}")
        st.markdown(f"**Entrevistados:** {', '.join(empresa['entrevistados'])}")
    
    st.markdown("---")
    st.subheader("üìä Estad√≠sticas de Trabajadores")
    
    estadisticas = empresa['estadisticas']
    df_estadisticas = pd.DataFrame.from_dict(estadisticas, orient='index', columns=['Cantidad'])
    st.bar_chart(df_estadisticas)
    
    st.markdown("</div>", unsafe_allow_html=True)

def formulario_verificacion_page():
    if st.button("‚Üê Regresar", key="back_formulario", type="secondary", use_container_width=True, 
                help="Volver a la p√°gina anterior", on_click=go_back):
        return
    
    st.title("üìã Formulario de Verificaci√≥n")
    st.markdown("---")
    
    # Paso 1: Seleccionar empresa
    st.subheader("1. Seleccione la empresa a verificar")
    ruc = st.text_input("Ingrese el RUC de la empresa", key="form_ruc_input")
    
    if st.button("Cargar Empresa", key="cargar_empresa_btn"):
        if ruc:
            try:
                response = requests.get(
                    f"{BACKEND_URL}/empresas/{ruc}",
                    headers={"Authorization": f"Bearer {st.session_state.token}"}
                )
                if response.status_code == 200:
                    empresa = response.json()
                    st.session_state.empresa_actual = empresa
                    st.success(f"Empresa cargada: {empresa['razon_social']}")
                else:
                    st.warning("No se encontr√≥ una empresa con ese RUC")
            except requests.exceptions.RequestException:
                st.error("Error al conectar con el servidor")
        else:
            st.warning("Por favor ingrese un RUC")
    
    if 'empresa_actual' in st.session_state and st.session_state.empresa_actual:
        empresa = st.session_state.empresa_actual
        display_empresa_info(empresa)
        
        # Paso 2: Cargar estructura del formulario
        st.subheader("2. Complete el formulario de verificaci√≥n")

        # Definir la estructura del formulario
        PREGUNTAS_SST = {
            "gestion_administrativa": {
                "title": "Gesti√≥n Administrativa",
                "questions": [
                    {
                        "id": "ga1",
                        "normativa": "Acuerdo Ministerial 196 (2024) Art. 4 y Art.18. Decisi√≥n 584 (2004) Art. 11. C√≥digo del Trabajo (2005) Art. 434.",
                        "pregunta": "¬øCuenta con un Plan de Prevenci√≥n de Riesgos Laborales (hasta 9 trabajadores) aprobado y registrado en el SUT?",
                        "requisitos": "Documento aprobado por la m√°xima autoridad y registrado en el Sistema √önico de Trabajo (SUT)"
                    },
                    {
                        "id": "ga2",
                        "normativa": "Acuerdo Ministerial 196 (2024) Art. 4, 19. Decisi√≥n 584 (2004) Art. 11. Decreto Ejecutivo 256 (2024) Art. 19.",
                        "pregunta": "¬øCuenta con un Reglamento de Higiene y seguridad (m√°s de 10 trabajadores) aprobado y registrado en el SUT?",
                        "requisitos": "Debe contener: Pol√≠tica de SST, organizaci√≥n, responsabilidades, procedimientos y registros obligatorios"
                    },
                    {
                        "id": "ga3",
                        "normativa": "Acuerdo Ministerial 196 (2024) Art. 18 y 19. Decreto Ejecutivo 256 (2024) Art. 20.",
                        "pregunta": "¬øSe ha socializado a todos los trabajadores la Pol√≠tica de seguridad y salud en el trabajo?",
                        "requisitos": "Evidencia de socializaci√≥n (actas, registros de asistencia, comunicados)"
                    },
                    {
                    "id": "ga4",
                    "normativa": "Acuerdo Ministerial 196 (2024) Art. 18 y 19. Decreto Ejecutivo 256 (2024) Art. 25.",
                    "pregunta": "¬øCuenta con el registro del Modelo de Seguridad e Higiene del Trabajo en la Plataforma SUT?",
                    "requisitos": "Captura de pantalla del registro vigente en el SUT"
                    },
                    {
                    "id": "ga5",
                    "normativa": "Acuerdo Ministerial 196 (2024) Art. 14",
                    "pregunta": "¬øCuenta con el registro del Texto del Trabajo en la Plataforma SUT?",
                    "requisitos": "Documento que contenga las condiciones de trabajo registrado en el SUT"
                    },
                    {
                    "id": "ga6",
                    "normativa": "Decreto Ejecutivo 256 (2024) Art. 21.",
                    "pregunta": "¬øCuenta con el registro del Servicio Externo de Seguridad e Higiene del Trabajo en la Plataforma SUT?",
                    "requisitos": "Contrato vigente y registro en SUT del servicio externo"
                    },
                    {
                    "id": "ga7",
                    "normativa": "Decreto Ejecutivo 256 (2024) Art. 33.",
                    "pregunta": "¬øCuenta con informe de actividades realizadas por t√©cnico o servicio externo de seguridad e higiene del trabajo?",
                    "requisitos": "Informe con: Objetivo, estad√≠sticas b√°sicas, actividades ejecutadas, horas de gesti√≥n, conclusiones, fotos y firmas"
                    },
                    {
                    "id": "ga8",
                    "normativa": "Decreto Ejecutivo 256 (2024) Art. 32.",
                    "pregunta": "¬øCuenta con el registro del profesional m√©dico en la Plataforma SUT?",
                    "requisitos": "Registro vigente del m√©dico ocupacional en el SUT"
                    },
                    {
                    "id": "ga9",
                    "normativa": "Resoluci√≥n 657 (2008) Art. 10, 13, 14.",
                    "pregunta": "¬øCuenta con el registro del Delegado de Seguridad y Salud en la plataforma SUT?",
                    "requisitos": "Acta de elecci√≥n y registro en SUT del delegado"
                    },
                    {
                    "id": "ga10",
                    "normativa": "Decreto Ejecutivo 256 (2024) Art. 36. Art. 38.",
                    "pregunta": "¬øCuenta con el registro del Comit√© de Seguridad y Salud en la plataforma SUT?",
                    "requisitos": "Acta de constituci√≥n y registro en SUT del comit√©"
                }
            ]
         },
            "gestion_tecnica": {
                "title": "Gesti√≥n T√©cnica",
                "questions": [
                    {
                        "id": "gt1",
                        "normativa": "Decisi√≥n 584. Art. 11. Art. 19. C√≥digo del Trabajo Art. 42. Decreto Ejecutivo 255 (2024) Art. 28.",
                        "pregunta": "¬øSe dispone de un descriptivo por puesto de trabajo?",
                        "requisitos": "Debe incluir: N¬∞ de trabajadores, actividades, tareas espec√≠ficas, horas diarias, recursos utilizados (m√°quinas, equipos, agentes qu√≠micos/biol√≥gicos)"
                    },  
                    {
                        "id": "gt2",
                        "normativa": "Decisi√≥n 584. Art. 11.",
                        "pregunta": "¬øCuenta con un mapa de riesgos del lugar, y/o, centro de trabajo?",
                        "requisitos": "Debe contener: Se√±alizaci√≥n de SST, EPP, dispositivos de parada de emergencia"
                    },
                    {
                        "id": "gt3",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11. Resoluci√≥n 957 (2008) Art. 1. Decreto Ejecutivo 255 (2024) Art. 27 y 28, 47.",
                        "pregunta": "¬øCuenta con una matriz de identificaci√≥n de peligros y evaluaci√≥n de riesgos laborales por puesto de trabajo con metodolog√≠a reconocida?",
                        "requisitos": "Matriz con metodolog√≠a validada (INSHT, NTP, ISO, etc.)"
                    },
                    {
                        "id": "gt4",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11,12, 18. Resoluci√≥n 957 (2008) Art. 1. Decreto Ejecutivo 255 (2024) Art. 48 Acuerdo Ministerial 196 (2024)",
                        "pregunta": "¬øCuenta con informe de medici√≥n de agentes f√≠sico, qu√≠mico y/o biol√≥gico del puesto de trabajo?",
                        "requisitos": "Informe con: Fecha, puesto, trabajadores expuestos, agente, metodolog√≠a, resultados, comparaci√≥n con normativa, firmas, certificados de calibraci√≥n, fotos"
                    },
                    {
                        "id": "gt5",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11, 12, 18 Resoluci√≥n 957 (2008) Art. 1 Decreto Ejecutivo 255 (2024) Art. 44, 45 y 46. Acuerdo Ministerial 196 (2024).",
                        "pregunta": "¬øCuenta con informe de evaluaci√≥n de riesgos de seguridad, ergon√≥micos y psicosociales?",
                        "requisitos": "Informe con: Fecha, puesto, trabajadores, riesgo identificado, metodolog√≠a, resultados, comparaci√≥n normativa, firmas, fotos"
                    },
                    {
                        "id": "gt6",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11 Resoluci√≥n 957 (2008) Art. 1 C√≥digo del Trabajo Art. 412 Decreto Ejecutivo 255 (2024) Art. 49",
                        "pregunta": "¬øCuenta con informe de medidas de prevenci√≥n y protecci√≥n implementadas por puesto de trabajo?",
                        "requisitos": "Informe con: Fecha, medidas implementadas (eliminaci√≥n, sustituci√≥n, controles), fechas implementaci√≥n, resultados, seguimiento, firmas, fotos"
                    },
                    {
                        "id": "gt7",
                        "normativa": "Resoluci√≥n 957 (2008) Art. 1.",
                        "pregunta": "¬øCuenta con el c√°lculo del riesgo residual en la matriz de identificaci√≥n de peligros?",
                        "requisitos": "Matriz actualizada con valoraci√≥n de riesgo residual post-implementaci√≥n de controles"
                    },
                    {
                        "id": "gt8",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11.",
                        "pregunta": "¬øSe ha verificado in situ la implementaci√≥n de medidas de prevenci√≥n y protecci√≥n?",
                        "requisitos": "Checklist o informe de verificaci√≥n con evidencias fotogr√°ficas"
                    },
                    {
                        "id": "gt9",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe ha realizado la limpieza y mantenimiento peri√≥dico de luminarias?",
                        "requisitos": "Registro de mantenimiento con fechas y responsables"
                    },
                    {
                        "id": "gt10",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe ha realizado mantenimiento peri√≥dico de los sistemas de ventilaci√≥n?",
                        "requisitos": "Registro de mantenimiento y mediciones de calidad de aire"
                    },
                    {
                        "id": "gt11",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe han clasificado los agentes qu√≠micos seg√∫n su categorizaci√≥n de peligros?",
                        "requisitos": "Inventario de qu√≠micos con clasificaci√≥n GHS"
                    },
                    {
                        "id": "gt12",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLos recipientes con agentes qu√≠micos cuentan con tapas adecuadas?",
                        "requisitos": "Verificaci√≥n visual de recipientes correctamente cerrados"
                    },
                    {
                        "id": "gt13",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe almacenan agentes qu√≠micos en √°reas espec√≠ficas seg√∫n su compatibilidad?",
                        "requisitos": "√Åreas de almacenamiento segregadas seg√∫n compatibilidad qu√≠mica"
                    },
                    {
                        "id": "gt14",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe dispone de fichas de datos de seguridad de los agentes qu√≠micos accesibles?",
                        "requisitos": "Fichas SDS actualizadas y en lugar accesible para trabajadores"
                    },
                    {
                        "id": "gt15",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe ha etiquetado adecuadamente los agentes qu√≠micos con informaci√≥n en espa√±ol?",
                        "requisitos": "Etiquetas con pictogramas, frases H y P, en espa√±ol"
                    },
                    {
                        "id": "gt16",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe aplican lineamientos de transporte, almacenamiento y manejo de productos qu√≠micos?",
                        "requisitos": "Procedimientos documentados y evidencias de cumplimiento"
                    },
                    {
                        "id": "gt17",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe aplican medidas de bioseguridad para agentes biol√≥gicos?",
                        "requisitos": "Protocolos de bioseguridad seg√∫n nivel de riesgo"
                    },
                    {
                        "id": "gt18",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe ha dispuesto √°rea espec√≠fica para desechos biol√≥gicos?",
                        "requisitos": "√Årea con contenedores diferenciados y protocolos de disposici√≥n"
                    },
                    {
                        "id": "gt19",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe ha implementado control de plagas y vectores?",
                        "requisitos": "Contrato o registros de control de plagas"
                    },
                    {
                        "id": "gt20",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLos lugares de trabajo se encuentran ordenados y limpios?",
                        "requisitos": "Verificaci√≥n visual de condiciones de orden y limpieza"
                    },
                    {
                        "id": "gt21",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLas √°reas de circulaci√≥n cuentan con niveles m√≠nimos de iluminaci√≥n?",
                        "requisitos": "Mediciones de iluminaci√≥n seg√∫n NTE INEN 2 250"
                    },
                    {
                        "id": "gt22",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe han delimitado √°reas para circulaci√≥n del personal y/o veh√≠culos?",
                        "requisitos": "Marcaje visible de zonas de circulaci√≥n"
                    },
                    {
                        "id": "gt23",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øSe han delimitado √°reas para emplazamiento de m√°quinas?",
                        "requisitos": "√Åreas se√±alizadas para ubicaci√≥n de equipos"
                    },
                    {
                        "id": "gt24",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLas rampas est√°n dise√±adas conforme a la norma?",
                        "requisitos": "Cumplimiento de pendientes y medidas de seguridad"
                    },
                    {
                        "id": "gt25",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLa estructura de prevenci√≥n contra ca√≠das est√° en buen estado?",
                        "requisitos": "Inspecci√≥n de barandillas, plataformas, escaleras, etc."
                    },
                    {
                        "id": "gt26",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLos dispositivos de parada de emergencia est√°n se√±alizados y accesibles?",
                        "requisitos": "Verificaci√≥n visual de se√±alizaci√≥n y accesibilidad"
                    },
                    {
                        "id": "gt27",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLas partes m√≥viles de motores y transmisi√≥n est√°n protegidas?",
                        "requisitos": "Verificaci√≥n de resguardos y protecciones"
                    },
                    {
                        "id": "gt28",
                        "normativa": "Acuerdo Ministerial 196 (2024) Anexo 3",
                        "pregunta": "¬øLas puertas y salidas est√°n se√±alizadas y libres de obst√°culos?",
                        "requisitos": "Verificaci√≥n visual de se√±alizaci√≥n y despeje"
                    },
                    {
                        "id": "gt29",
                        "normativa": "NTE INEN-ISO 3864-1.",
                        "pregunta": "¬øCumple con la normativa de se√±alizaci√≥n preventiva?",
                        "requisitos": "Se√±ales amarillas con pictogramas seg√∫n norma"
                    },
                    {
                        "id": "gt30",
                        "normativa": "NTE INEN-ISO 3864-1.",
                        "pregunta": "¬øCumple con la normativa de se√±alizaci√≥n prohibitiva?",
                        "requisitos": "Se√±ales rojas con pictogramas seg√∫n norma"
                    },
                    {
                        "id": "gt31",
                        "normativa": "NTE INEN-ISO 3864-1.",
                        "pregunta": "¬øCumple con la normativa de se√±alizaci√≥n de obligaci√≥n?",
                        "requisitos": "Se√±ales azules con pictogramas seg√∫n norma"
                    },
                    {
                        "id": "gt32",
                        "normativa": "NTE INEN-ISO 3864-1.",
                        "pregunta": "¬øCumple con la normativa de se√±alizaci√≥n de equipos contra incendio?",
                        "requisitos": "Se√±ales rojas para equipos contra incendio"
                    },
                    {
                        "id": "gt33",
                        "normativa": "Decreto Ejecutivo 255 (2024) Art. 58. Decisi√≥n 584 (2004) Art. 11.",
                        "pregunta": "¬øExiste se√±alizaci√≥n para evacuaci√≥n en caso de emergencia?",
                        "requisitos": "Se√±alizaci√≥n fotoluminiscente seg√∫n normativa"
                    },
                    {
                        "id": "gt34",
                        "normativa": "Decreto Ejecutivo 255 (2024) Art. 58. Decisi√≥n 584 (2004) Art. 11.",
                        "pregunta": "¬øCuenta con procedimiento para trabajos especiales?",
                        "requisitos": "Procedimiento con: objetivo, responsable, definici√≥n de puesto, riesgos, controles, EPP, formato de permiso"
                    },
                    {
                        "id": "gt35",
                        "normativa": "Decreto Ejecutivo 255 (2024) Art. 58. Decisi√≥n 584 (2004) Art. 11.",
                        "pregunta": "¬øSe emiten los permisos de trabajo conforme el procedimiento?",
                        "requisitos": "Registros de permisos emitidos completos"
                    },
                    {
                        "id": "gt36",
                        "normativa": "Decreto Ejecutivo 255 (2024) Art. 58 Acuerdo Ministerial (2017) 174. Acuerdo Ministerial (2017) 13.",
                        "pregunta": "¬øCuenta con registros de apertura y cierre de permisos para trabajos especiales?",
                        "requisitos": "Registros completos con fechas, responsables y cierres"
                    }
                ]
            },
            "gestion_talento_humano": {
                "title": "Gesti√≥n del Talento Humano ",
                "questions": [
                    {
                        "id": "gth1",
                        "normativa": "Constituci√≥n de la Rep√∫blica del Ecuador (2008) Art. 35. Decisi√≥n 584 (2004) Art. 11, 18, 25. Ley Org√°nica de Discapacidades (2012) Art. 16, 19, 45, 52. C√≥digo del Trabajo (2005) Art. 42.",
                        "pregunta": "¬øSe ha identificado a trabajadores en grupos de atenci√≥n prioritaria?",
                        "requisitos": "Adultos mayores, mujeres en lactancia, embarazadas, con discapacidad, enfermedades catastr√≥ficas"
                    },
                    {
                        "id": "gth2",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11, 27. Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øSe evidencia implementaci√≥n de medidas para grupos prioritarios?",
                        "requisitos": "Adaptaciones f√≠sicas, horarias o de funciones seg√∫n necesidades"
                    },
                    {
                        "id": "gth3",
                        "normativa": "Acuerdo Ministerial (2017) 174. Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øCuenta con certificaci√≥n de PRL para construcci√≥n?",
                        "requisitos": "Certificado vigente para actividades de alto riesgo"
                    },
                    {
                        "id": "gth4",
                        "normativa": "Acuerdo Ministerial (2017) 13. Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øCuenta con certificaci√≥n de PRL para energ√≠a el√©ctrica?",
                        "requisitos": "Certificado vigente para trabajos el√©ctricos"
                    },
                    {
                        "id": "gth5",
                        "normativa": "Reglamento a Ley de Transporte Terrestre, Tr√°nsito y Seguridad Vial (2012) Art. 132. Decreto Ejecutivo 255 (2024) Art. 51.",
                        "pregunta": "¬øEl personal que opera veh√≠culos cuenta con licencia adecuada?",
                        "requisitos": "Licencias vigentes seg√∫n categor√≠a del veh√≠culo/maquinaria"
                    },
                    {
                        "id": "gth6",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11, 23. Resoluci√≥n 957 (2008) Art 1. Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øCuenta con registro de asistencia a inducciones de SST?",
                        "requisitos": "Registro con: fecha, tema, nombres, c√©dula, firmas, material, evaluaci√≥n"
                    },
                    {
                        "id": "gth7",
                        "normativa": "Decisi√≥n 584 (2004) Art. 19 Resoluci√≥n 957 (2008) Art 1.",
                        "pregunta": "¬øSe han efectuado campa√±as de comunicaci√≥n en SST?",
                        "requisitos": "Evidencias de campa√±as realizadas (fotos, materiales)"
                    },
                    {
                        "id": "gth8",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11, 23. Resoluci√≥n 957 (2008) Art 1. Decreto Ejecutivo. 255 Art. 15, 16, 28. Acuerdo Ministerial 196 Art. 4.",
                        "pregunta": "¬øCuenta con programa de formaci√≥n en SST?",
                        "requisitos": "Programa con: objetivos, diagn√≥stico, contenido, cronograma, metodolog√≠a, duraci√≥n, responsables"
                    },
                    {
                    "id": "gth9",
                    "normativa": "Decisi√≥n 584 (2004) Art. 11 literal h), i), Art. 23. Resoluci√≥n 957 (2008) Art 1 literal c). Decreto Ejecutivo 255 (2024) Art. 15, 16,28.",
                    "pregunta": "¬øCuenta con registro de asistencia a capacitaciones?",
                    "requisitos": "Registro con: fecha, tema, participantes, firmas, material, evaluaci√≥n"
                    },
                    {
                    "id": "gth10",
                    "normativa": "Decisi√≥n 584 (2004) Art. 11, 23. Resoluci√≥n 957 (2008) Art 1. Decreto Ejecutivo 255 (2024) Art. 15, 16, 28.",
                    "pregunta": "¬øLas capacitaciones est√°n registradas en la plataforma SUT?",
                    "requisitos": "Capturas de pantalla del registro en SUT"
                    }
                ]
            },
            "procedimientos_operativos": {
                 "title": "Procedimientos Operativos B√°sicos ",
                    "questions": [
                    {
                        "id": "po1",
                        "normativa": "Decisi√≥n 584 (2004) Art. 14 y 22. Resoluci√≥n 957 (2008) Art 5. Reglamento a la LOSEP (2011) Art. 230. C√≥digo del Trabajo (2005) Art. 412. Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øCuenta con matriz de ex√°menes m√©dico ocupacionales por puesto?",
                        "requisitos": "Matriz con: puesto, n¬∞ trabajadores, riesgo, tipo examen, frecuencia, responsable"
                    },
                    {
                        "id": "po2",
                        "normativa": "Decisi√≥n 584 (2004) Art. 14 y 22. Resoluci√≥n 957 (2008) Art 5. Reglamento a la LOSEP (2011) Art. 230. C√≥digo del Trabajo (2005) Art. 412 . Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øCuenta con cronograma de ex√°menes m√©dico ocupacionales?",
                        "requisitos": "Cronograma anual con fechas programadas"
                    },
                    {
                        "id": "po3",
                        "normativa": "Decisi√≥n 584 (2004) Art. 14 y 22. Resoluci√≥n 957 (2008) Art 5. Reglamento a la LOSEP (2011) Art. 230. C√≥digo del Trabajo (2005) Art. 412. Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øCuenta con informe de resultados de ex√°menes m√©dicos?",
                        "requisitos": "Informe con: fecha, periodo, puesto, n¬∞ ex√°menes, tipo, resultados generales, acciones, firmas"
                    },
                    {
                        "id": "po4",
                        "normativa": "Decisi√≥n 584 (2004) Art. 14 y 22. Resoluci√≥n 957 (2008) Art 5. Reglamento a la LOSEP (2011) Art. 230. C√≥digo del Trabajo (2005) Art. 412. Decreto Ejecutivo (2024) 255 Art. 15.",
                        "pregunta": "¬øCuenta con certificados de aptitud m√©dica laboral?",
                        "requisitos": "Certificados con firma del m√©dico y aceptaci√≥n del trabajador"
                    },
                    {
                        "id": "po5",
                        "normativa": "Resoluci√≥n 957 (2008) Art 5. Decreto Ejecutivo 255 (2024) Art. 15.",
                        "pregunta": "¬øCuenta con informe trimestral de indicadores de salud?",
                        "requisitos": "Informe con: enfermedad com√∫n, profesional y accidentes de trabajo"
                    },
                    {
                        "id": "po6",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11. Resoluci√≥n 957 (2008) Art. 1, Art. 5. C√≥digo del Trabajo (2005) Art. 42. Reglamento a la LOSEP (2011) Art. 230. Resoluci√≥n del IESS CD 513 (2016), Art. 56.",
                        "pregunta": "¬øCuenta con procedimiento de investigaci√≥n de accidentes?",
                        "requisitos": "Procedimiento con: objetivos, alcance, responsabilidades, metodolog√≠a, acciones correctivas"
                    },
                    {
                        "id": "po7",
                        "normativa": "Decisi√≥n 584 (2004) Art. 1. Resoluci√≥n 957 (2008) Art. 15. Resoluci√≥n del IESS CD 513 (2016) Art. 1, 12, 47.",
                        "pregunta": "¬øCuenta con registro interno de incidentes y accidentes?",
                        "requisitos": "Registro con: fecha, hora, trabajador, puesto, lugar, descripci√≥n, consecuencias"
                    },
                    {
                        "id": "po8",
                        "normativa": "Resoluci√≥n del IESS. CD 513 (2016) Art. 47",
                        "pregunta": "¬øCuenta con informe de investigaci√≥n de accidentes?",
                        "requisitos": "Informe con: fecha, hora, lugar, trabajador, descripci√≥n, testigos, causas, acciones"
                    },
                    {
                        "id": "po9",
                        "normativa": "Resoluci√≥n del IESS. CD 513 (2016) Art. 44.",
                        "pregunta": "¬øSe ha reportado el accidente a la autoridad competente?",
                        "requisitos": "Copia del reporte al IESS o autoridad correspondiente"
                    },
                    {
                        "id": "po10",
                        "normativa": "Resoluci√≥n del IESS. CD 513 (2016) Art. 63.",
                        "pregunta": "¬øSe han aplicado medidas para evitar nuevos accidentes?",
                        "requisitos": "Evidencia de implementaci√≥n de medidas correctivas"
                    },
                    {
                        "id": "po11",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11. Resoluci√≥n 957 (2008) Art. 5. C√≥digo del Trabajo (2005) Art. 42. Reglamento a la LOSEP (2011) Art. 230. Resoluci√≥n del IESS. CD 513 (2016) Art. 47.",
                        "pregunta": "¬øCuenta con procedimiento de investigaci√≥n de enfermedades profesionales?",
                        "requisitos": "Procedimiento documentado y aprobado"
                    },
                    {
                        "id": "po12",
                        "normativa": "Resoluci√≥n del IESS. CD 513 (2016) Art. 45. C√≥digo del Trabajo (2005) Art. 42. Acuerdo Ministerial 174 (2008) Art. 11, 136, 137.",
                        "pregunta": "¬øSe ha reportado la presunci√≥n de enfermedad profesional?",
                        "requisitos": "Copia del reporte al IESS"
                    },
                    {
                        "id": "po13",
                        "normativa": "Resoluci√≥n del IESS. CD 513 (2016) Art. C√≥digo del Trabajo (2005) Art. 42. Resoluci√≥n 957 (2009) Art.1. Dedici√≥n 584 (2004) Art. 4. Decreto Ejecutivo 255 (2024) Art. 28.",
                        "pregunta": "¬øSe han aplicado medidas para evitar nuevas enfermedades profesionales?",
                        "requisitos": "Evidencia de implementaci√≥n de medidas correctivas"
                    },
                    {
                        "id": "po14",
                        "normativa": "Decisi√≥n 584 (2004) Art. 16. Resoluci√≥n 957 (2009) Art. 1. Reglamento de prevenci√≥n, mitigaci√≥n y protecci√≥n contra incendios (2009) Art. 17. Acuerdo Ministerial 174 (2017) Art. 134.",
                        "pregunta": "¬øCuenta con plan de emergencias implementado?",
                        "requisitos": "Plan con: objetivos, alcance, amenazas, procedimientos, mapas, cronogramas, brigadas"
                    },
                    {
                        "id": "po15",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11, 23. Resoluci√≥n 957 (2009) Art.1. Decreto Ejecutivo 255 (2024) Art. 15. Acuerdo Ministerial 196 (2024) Art. 4",
                        "pregunta": "¬øCuenta con informe anual de simulacros realizados?",
                        "requisitos": "Informe con: fecha, objetivo, tipo, categor√≠a, duraci√≥n, participantes, incidentes, lecciones"
                    },
                    {
                        "id": "po16",
                        "normativa": "Decisi√≥n 584 (2004) Art. 11, 23. Resoluci√≥n 957 (2009) Art. 1, 23. Decreto Ejecutivo 255 (2024) Art. 15. Acuerdo Ministerial 196 Art. 4. Decreto Ejecutivo 255 (2024) Art. 50.",
                        "pregunta": "¬øSe evidencia implementaci√≥n del plan de emergencia?",
                        "requisitos": "Evidencias de implementaci√≥n (fotos, registros)"
                    },
                    {
                        "id": "po17",
                        "normativa": "Decisi√≥n 584 (2004) Art 11 literal c). Decreto Ejecutivo 256 Cap√≠tulo II Art. 56",
                        "pregunta": "¬øCuenta con procedimiento de adquisici√≥n de EPP y ropa de trabajo?",
                        "requisitos": "Procedimiento con: objetivo, alcance, responsabilidades, identificaci√≥n de necesidades, especificaciones"
                    },
                    {
                        "id": "po18",
                        "normativa": "Decisi√≥n 584 (2004) Art 11 literal d). Decreto Ejecutivo 256 Cap√≠tulo II Art. 56",
                        "pregunta": "¬øCuenta con registro de entrega de EPP y ropa de trabajo?",
                        "requisitos": "Registro con: fecha, trabajador, c√©dula, detalle de EPP, firmas, devoluciones"
                    },
                    {
                        "id": "po19",
                        "normativa": "Decisi√≥n 584 (2004) Art 11. Decreto Ejecutivo 255 (2024) Art. 56.",
                        "pregunta": "¬øSe evidencia correcta utilizaci√≥n de EPP?",
                        "requisitos": "Verificaci√≥n in situ del uso adecuado"
                    },
                    {
                        "id": "po20",
                        "normativa": "Acuerdo Ministerial 032 (2017) Art. G. Acuerdo Ministerial 398 VIII-SIDA (2006), Acuerdo Ministerial 244. (2021)",
                        "pregunta": "¬øSe ha implementado programa de prevenci√≥n de riesgo psicosocial?",
                        "requisitos": "Programa con al menos 12 actividades implementadas"
                    },
                    {
                        "id": "po21",
                        "normativa": "Acuerdo Ministerial 032 (2017) Art. 9.",
                        "pregunta": "¬øSe ha implementado programa de prevenci√≥n de consumo de alcohol, tabaco y drogas?",
                        "requisitos": "Programa con actividades documentadas"
                    },
                    {
                        "id": "po22",
                        "normativa": "Acuerdo Interministerial 038 (2019).",
                        "pregunta": "¬øSe ha registrado el programa de prevenci√≥n de consumo en el SUT?",
                        "requisitos": "Captura de pantalla del registro en SUT"
                    }
                ]
            },
           "servicios_permanentes": {
                "title": "Servicios Permanentes ",
                    "questions": [
                    {
                        "id": "sp1",
                        "normativa": "C√≥digo de Trabajo (2005) Art. 430",
                        "pregunta": "¬øCuenta con botiqu√≠n de emergencia para primeros auxilios?",
                        "requisitos": "Botiqu√≠n completo, accesible y con productos vigentes"
                    },
                    {
                        "id": "sp2",
                        "normativa": "C√≥digo de Trabajo (2005) Art. 42.",
                        "pregunta": "¬øEl comedor cuenta con adecuada salubridad y ambientaci√≥n?",
                        "requisitos": "Limpieza, ventilaci√≥n, mobiliario en buen estado"
                    },
                    {
                        "id": "sp3",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øAplica para centros con 50+ trabajadores a 2km de poblaci√≥n?",
                        "requisitos": "Solo si cumple las condiciones de distancia y n√∫mero de trabajadores"
                    },
                    {
                        "id": "sp4",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øEn caso de existir cocina, cuenta con salubridad adecuada?",
                        "requisitos": "Limpieza, almacenamiento adecuado de alimentos"
                    },
                    {
                        "id": "sp5",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øSe dispone de abastecimiento de agua para consumo humano?",
                        "requisitos": "Agua potable disponible para los trabajadores"
                    },
                    {
                        "id": "sp6",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øCuenta con servicios higi√©nicos en buenas condiciones?",
                        "requisitos": "Limpios, funcionando, separados por sexo"
                    },
                    {
                        "id": "sp7",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øCuenta con duchas en buenas condiciones?",
                        "requisitos": "Funcionando, limpias, con agua"
                    },
                    {
                        "id": "sp8",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øCuenta con lavabos en buenas condiciones y con √∫tiles?",
                        "requisitos": "Lavabos funcionando con jab√≥n y toallas"
                    },
                    {
                        "id": "sp9",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øSe dispone de vestuarios separados por sexo?",
                        "requisitos": "Vestuarios limpios y en buen estado"
                    },
                    {
                        "id": "sp10",
                        "normativa": "Acuerdo Ministerial 196 (2024), Anexo 3",
                        "pregunta": "¬øCuenta campamentos en buenas condiciones?",
                        "requisitos": "Con luz, ventilaci√≥n, agua, servicios higi√©nicos, comedores"
                    }
                ]
            } 
        }

        with st.form("formulario_verificacion"):
             # Iterar por cada secci√≥n
            for seccion, datos_seccion in PREGUNTAS_SST.items():
                st.markdown(f"## üèõÔ∏è {seccion}")
                
                with st.expander(f"### üìå {datos_seccion['title']}", expanded=False):
                    # Mostrar cada pregunta en formato de tabla
                    st.markdown("""
                    <table class="verification-table">
                        <thead>
                            <tr>
                                <th>N¬∞</th>
                                <th>CUMPLIMIENTO LEGAL / MEDIOS DE VERIFICACI√ìN</th>
                                <th>VERIFICACI√ìN</th>
                            </tr>
                        </thead>
                        <tbody>
                    """, unsafe_allow_html=True)
                    
                    for pregunta in datos_seccion['questions']:
                        st.markdown(f"""
                        <tr>
                            <td>{pregunta['id']}</td>
                            <td>
                                <div class='gestion-text'>{datos_seccion['title']}</div>
                                <div class='pregunta-header'>{pregunta['pregunta']}</div>
                                <div class='normativa-text'>Normativa: {pregunta['normativa']}</div>
                            </td>
                            <td>
                        """, unsafe_allow_html=True)

                        # Opci√≥n √∫nica de selecci√≥n (corregida)
                        opcion = st.radio(
                            "Seleccione:",
                            ["‚úÖ Cumple", "‚ùå No cumple", "‚ûñ No aplica"],
                            key=f"opcion_{pregunta['id']}",
                            horizontal=True,
                            index=None
                        )
                        
                        obs = st.text_input(
                            "Observaciones",
                            key=f"obs_{pregunta['id']}",
                            placeholder="Opcional"
                        )
                        
                        st.markdown("""
                            </td>
                        </tr>
                        """, unsafe_allow_html=True)
                    
                    st.markdown("""
                        </tbody>
                    </table>
                    """, unsafe_allow_html=True)

            # Bot√≥n de env√≠o
            submitted = st.form_submit_button("üíæ Guardar Formulario Completo", type="primary")
            
            if submitted:
                # Procesar respuestas
                preguntas_respuestas = []
                for seccion, datos_seccion in PREGUNTAS_SST.items():
                    for pregunta in datos_seccion['questions']:
                        respuesta = st.session_state.get(f"opcion_{pregunta['id']}", "No seleccionado")
                        
                        preguntas_respuestas.append({
                            "id": int(''.join(filter(str.isdigit, pregunta["id"]))),
                            "seccion": seccion,
                            "categoria": datos_seccion['title'],
                            "pregunta": pregunta["pregunta"],
                            "normativa": pregunta["normativa"],
                            "respuesta": respuesta,
                            "observaciones": st.session_state.get(f"obs_{pregunta['id']}", "")
                        })
                
                # Crear objeto formulario
                formulario = {
                    "empresa_ruc": empresa["ruc"],
                    "inspector_cedula": st.session_state.user_info["cedula"],
                    "preguntas": preguntas_respuestas
                }

                try:
                    response = requests.post(
                        f"{BACKEND_URL}/formularios/",
                        json=formulario,
                        headers={"Authorization": f"Bearer {st.session_state.token}"}
                    )
                    if response.status_code == 200:
                        st.success("‚úÖ Formulario guardado exitosamente!")
                        time.sleep(2)
                        st.session_state.current_page = "reportes"
                        st.rerun()
                    else:
                        st.error(f"Error al guardar formulario: {response.text}")
                except requests.exceptions.RequestException:
                    st.error("Error al conectar con el servidor")

def generate_pdf_report(empresa, estadisticas, preguntas, observaciones_generales):
    """Genera un PDF del reporte con encabezado y firma"""
    
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    
    # Configurar fuente compatible (soluci√≥n sin necesidad de fuente externa)
    pdf.set_font("Arial", size=12)
    
    # Funci√≥n para limpiar texto de caracteres especiales
    def clean_text(text):
        if text is None:
            return ""
        if not isinstance(text, str):
            text = str(text)
        # Reemplazo de caracteres especiales
        replacements = {
            '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u',
            '√Å': 'A', '√â': 'E', '√ç': 'I', '√ì': 'O', '√ö': 'U',
            '√±': 'n', '√ë': 'N', '√º': 'u', '√ú': 'U',
            '¬¥': '', '`': '', '¬®': '', '¬ø': '', '¬°': ''
        }
        for orig, repl in replacements.items():
            text = text.replace(orig, repl)
        return text
    
    # Encabezado con logo
    try:
        pdf.image("https://via.placeholder.com/150x50?text=SESACO+Logo", x=10, y=8, w=40)
    except:
        pass
    
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, clean_text("REPORTE DE VERIFICACION DE SEGURIDAD INDUSTRIAL"), ln=1, align='C')
    pdf.set_font("Arial", size=12)
    
    # Informaci√≥n de la empresa
    pdf.cell(0, 10, clean_text(f"Empresa: {empresa['razon_social']}"), ln=1)
    pdf.cell(0, 10, clean_text(f"RUC: {empresa['ruc']}"), ln=1)
    pdf.cell(0, 10, clean_text(f"Fecha de generacion: {datetime.now().strftime('%d/%m/%Y %H:%M')}"), ln=1)
    pdf.ln(10)
    
    # Informaci√≥n general
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, clean_text("Resumen Ejecutivo"), ln=1)
    pdf.set_font("Arial", size=12)
    
    cumplimiento = estadisticas['cumplimiento_promedio']
    pdf.multi_cell(0, 8, clean_text(f"Cumplimiento general: {cumplimiento}%"))
    
    if cumplimiento >= 80:
        evaluacion = "EXCELENTE"
    elif cumplimiento >= 50:
        evaluacion = "MODERADO"
    else:
        evaluacion = "BAJO"
    
    pdf.cell(0, 8, clean_text(f"Evaluacion: {evaluacion}"), ln=1)
    
    # Observaciones generales
    if observaciones_generales:
        pdf.ln(5)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 8, clean_text("Observaciones Generales:"), ln=1)
        pdf.set_font("Arial", size=11)
        pdf.multi_cell(0, 8, clean_text(observaciones_generales))
    
    # Detalle por secci√≥n
    pdf.add_page()
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, clean_text("Detalle por Area"), ln=1)
    pdf.set_font("Arial", size=10)
    
    for seccion, datos in estadisticas["secciones"].items():
        pdf.ln(5)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 8, clean_text(f"Area: {seccion}"), ln=1)
        pdf.set_font("Arial", size=10)
        
        total_aplicable = datos["total"] - datos["no_aplica"]
        porcentaje = (datos["cumple"] / total_aplicable) * 100 if total_aplicable > 0 else 0
        
        pdf.cell(90, 8, clean_text(f"Porcentaje de cumplimiento: {porcentaje:.1f}%"))
        pdf.cell(90, 8, clean_text(f"No conformidades: {datos['no_cumple']}"), ln=1)
        
        # Preguntas problem√°ticas
        preguntas_no_cumplen = [p for p in preguntas if p["seccion"] == seccion and p["respuesta"] == "‚ùå No cumple"]
        
        if preguntas_no_cumplen:
            pdf.set_font("Arial", 'B', 10)
            pdf.cell(0, 8, clean_text("No conformidades identificadas:"), ln=1)
            pdf.set_font("Arial", size=9)
            
            for p in preguntas_no_cumplen:
                pdf.multi_cell(0, 6, clean_text(f"- {p['pregunta']}"))
                pdf.multi_cell(0, 6, clean_text(f"  Normativa: {p['normativa']}"))
                if p['observaciones']:
                    pdf.multi_cell(0, 6, clean_text(f"  Observaciones: {p['observaciones']}"))
                pdf.ln(2)
    
    # Firma y sello
    pdf.add_page()
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, clean_text("Firma y Sello del Inspector"), ln=1)
    pdf.ln(20)
    
    # L√≠nea para firma
    pdf.cell(80, 10, clean_text(f"Nombre: {st.session_state.user_info['nombre']}"), ln=1)
    pdf.cell(80, 10, clean_text("Cedula: _________________________"), ln=1)
    pdf.cell(80, 10, clean_text("Firma:  _________________________"), ln=1)
    pdf.ln(20)
    
    # Pie de p√°gina
    pdf.set_font("Arial", 'I', 8)
    pdf.cell(0, 10, clean_text("Documento generado automaticamente por el sistema SESACO - Seguridad Industrial S.A."), 0, 0, 'C')
    
    return pdf.output(dest='S').encode('latin1')

def reportes_page():
    if st.button("‚Üê Regresar", key="back_reportes", type="secondary", use_container_width=True, 
                help="Volver a la p√°gina anterior", on_click=go_back):
        return
    
    st.title("üìä Reportes y Estad√≠sticas")
    st.markdown("---")
    
    if 'empresa_actual' in st.session_state and st.session_state.empresa_actual:
        empresa = st.session_state.empresa_actual
        
        try:
            # Obtener reporte de la empresa
            response = requests.get(
                f"{BACKEND_URL}/reportes/{empresa['ruc']}",
                headers={"Authorization": f"Bearer {st.session_state.token}"}
            )
            
            if response.status_code == 200:
                reporte = response.json()
                estadisticas = reporte["estadisticas"]
                ultimo_formulario = reporte["ultimo_formulario"]
                
                st.subheader(f"Reporte para: {empresa['razon_social']}")
                
                # Manejo seguro de la fecha
                fecha_verificacion = ultimo_formulario.get('fecha_verificacion', 'Fecha no disponible')
                st.caption(f"√öltima verificaci√≥n: {fecha_verificacion}")
                
                # Secci√≥n para observaciones generales
                observaciones_generales = st.text_area("Observaciones Generales:", 
                                                      placeholder="Ingrese observaciones generales para el informe...")
                
                # M√©tricas principales
                with st.container():
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("üìã Total Verificaciones", 
                                estadisticas["total_verificaciones"],
                                help="N√∫mero total de verificaciones realizadas")
                    with col2:
                        st.metric("‚úÖ Cumplimiento Promedio", 
                                f"{estadisticas['cumplimiento_promedio']}%",
                                help="Porcentaje promedio de cumplimiento")
                    with col3:
                        st.metric("üìù Preguntas Evaluadas", 
                                sum(sec['total'] for sec in estadisticas['secciones'].values()),
                                help="Total de preguntas evaluadas en todas las secciones")
                # Gr√°fico general de cumplimiento
                st.markdown("### üìà Distribuci√≥n General de Cumplimiento")
                try:
                    # Calcular totales
                    total_cumple = sum(s['cumple'] for s in estadisticas['secciones'].values())
                    total_no_cumple = sum(s['no_cumple'] for s in estadisticas['secciones'].values())
                    total_no_aplica = sum(s['no_aplica'] for s in estadisticas['secciones'].values())
                    
                    # Crear gr√°fico de pastel
                    fig_pie, ax_pie = plt.subplots(figsize=(8, 6))
                    sizes = [total_cumple, total_no_cumple, total_no_aplica]
                    labels = ['Cumple', 'No Cumple', 'No Aplica']
                    colors = ['#4CAF50', '#F44336', '#FFC107']
                    
                    wedges, texts, autotexts = ax_pie.pie(
                        sizes, 
                        labels=labels, 
                        colors=colors, 
                        autopct='%1.1f%%',
                        startangle=90,
                        explode=(0.05, 0, 0),
                        shadow=True,
                        textprops={'fontsize': 12}
                    )
                    
                    plt.setp(autotexts, size=12, weight="bold")
                    ax_pie.axis('equal')
                    ax_pie.set_title('Distribuci√≥n de Cumplimiento', pad=20, fontweight='bold')
                    
                    st.pyplot(fig_pie)
                    
                    # Leyenda mejorada
                    st.markdown("""
                    <div style="
                        background-color: #f8f9fa;
                        padding: 12px;
                        border-radius: 8px;
                        margin: 15px 0;
                        border-left: 4px solid #2E7D32;
                    ">
                        <strong style="color: #2E7D32">üìå Leyenda:</strong><br>
                        <span style="color: #4CAF50">‚óè Cumple:</span> Preguntas que cumplen con todos los requisitos<br>
                        <span style="color: #F44336">‚óè No Cumple:</span> Preguntas con no conformidades detectadas<br>
                        <span style="color: #FFC107">‚óè No Aplica:</span> Preguntas no relevantes para este centro de trabajo
                    </div>
                    """, unsafe_allow_html=True)
                    
                except Exception as e:
                    st.error(f"‚ö†Ô∏è No se pudo generar el gr√°fico: {str(e)}")

                # Gr√°fico de barras por secci√≥n
                st.markdown("### üìä Cumplimiento por √Årea")
                df_secciones = pd.DataFrame([
                    {
                        "Secci√≥n": seccion,
                        "Cumplimiento (%)": (datos["cumple"] / (datos["total"] - datos["no_aplica"])) * 100 
                                          if (datos["total"] - datos["no_aplica"]) > 0 else 0,
                        "Cumple": datos["cumple"],
                        "No Cumple": datos["no_cumple"],
                        "No Aplica": datos["no_aplica"],
                        "Total": datos["total"]
                    }
                    for seccion, datos in estadisticas["secciones"].items()
                ])
                
                # Ordenar por cumplimiento
                df_secciones = df_secciones.sort_values("Cumplimiento (%)", ascending=False)
                
                # Gr√°fico de barras
                fig_bar, ax_bar = plt.subplots(figsize=(10, 6))
                bars = ax_bar.barh(
                    df_secciones["Secci√≥n"], 
                    df_secciones["Cumplimiento (%)"],
                    color=['#4CAF50' if x > 70 else '#FFC107' if x > 40 else '#F44336' for x in df_secciones["Cumplimiento (%)"]]
                )
                
                # A√±adir etiquetas a las barras
                ax_bar.bar_label(bars, fmt='%.1f%%', padding=3, fontsize=10)
                ax_bar.set_xlim(0, 100)
                ax_bar.set_xlabel('Porcentaje de Cumplimiento')
                ax_bar.set_title('Cumplimiento por √Årea de Verificaci√≥n', pad=20, fontweight='bold')
                ax_bar.grid(axis='x', linestyle='--', alpha=0.7)
                
                st.pyplot(fig_bar)

                # Detalle por secci√≥n con gr√°ficos individuales
                st.markdown("### üìë Detalle por Secci√≥n")
                
                for seccion, datos in estadisticas["secciones"].items():
                    with st.expander(f"üîç {seccion} - {datos['cumple']}/{datos['total'] - datos['no_aplica']} cumplen", expanded=False):
                        # Calcula porcentaje de cumplimiento (excluyendo no aplica)
                        total_aplicable = datos["total"] - datos["no_aplica"]
                        porcentaje = (datos["cumple"] / total_aplicable) * 100 if total_aplicable > 0 else 0
                        
                        # Columnas para m√©tricas y gr√°fico
                        col_metrics, col_chart = st.columns([1, 2])
                        
                        with col_metrics:
                            st.metric("üìà Porcentaje de Cumplimiento", f"{porcentaje:.1f}%")
                            st.metric("‚úÖ Cumple", datos["cumple"])
                            st.metric("‚ùå No Cumple", datos["no_cumple"])
                            st.metric("‚ûñ No Aplica", datos["no_aplica"])
                        
                        with col_chart:
                            # Gr√°fico de pastel por secci√≥n
                            fig_sec, ax_sec = plt.subplots(figsize=(6, 6))
                            sizes_sec = [datos["cumple"], datos["no_cumple"], datos["no_aplica"]]
                            labels_sec = ['Cumple', 'No Cumple', 'No Aplica']
                            colors_sec = ['#4CAF50', '#F44336', '#FFC107']
                            
                            wedges_sec = ax_sec.pie(
                                sizes_sec, 
                                labels=labels_sec, 
                                colors=colors_sec, 
                                autopct='%1.1f%%',
                                startangle=90,
                                textprops={'fontsize': 10}
                            )
                            
                            ax_sec.set_title(f'Distribuci√≥n en {seccion}', fontsize=12)
                            st.pyplot(fig_sec)
                        
                        # Mostrar preguntas problem√°ticas con m√°s detalle
                        preguntas_no_cumplen = [
                            p for p in ultimo_formulario["preguntas"] 
                            if p["seccion"] == seccion and p["respuesta"] == "‚ùå No cumple"
                        ]
                        
                        if preguntas_no_cumplen:
                            st.warning(f"üö® {len(preguntas_no_cumplen)} no conformidades encontradas en esta secci√≥n:")
                            
                            for idx, p in enumerate(preguntas_no_cumplen, 1):
                                with st.container():
                                    st.markdown(f"""
                                    <div style='
                                        background-color: #fff3e0;
                                        border-radius: 8px;
                                        padding: 1rem;
                                        margin-bottom: 1rem;
                                        border-left: 4px solid #FB8C00;
                                    '>
                                        <div style='font-weight: 600; color: #E65100;'>
                                            No conformidad {idx}: {p['pregunta']}
                                        </div>
                                        <div style='font-size: 0.85rem; color: #666; font-style: italic; margin-top: 0.5rem;'>
                                            <strong>Normativa:</strong> {p['normativa']}
                                        </div>
                                        <div style='margin-top: 0.5rem; font-size: 0.9rem;'>
                                            <strong>Categor√≠a:</strong> {p['categoria']}
                                        </div>
                                        {f"<div style='margin-top: 0.5rem; font-size: 0.9rem;'>üìù <strong>Observaciones:</strong> {p['observaciones']}</div>" if p['observaciones'] else ""}
                                    </div>
                                    """, unsafe_allow_html=True)
                        else:
                            st.success("üéâ Todas las preguntas aplicables en esta secci√≥n cumplen con la normativa")

                # Secci√≥n de exportaci√≥n a PDF
                st.markdown("---")
                st.subheader("üì§ Exportar Reporte Completo")

                # Opciones de exportaci√≥n
                export_col1, export_col2 = st.columns(2)

                with export_col1:
                    # Generar PDF
                    if st.button("üñ®Ô∏è Generar Reporte PDF", type="primary", use_container_width=True):
                        with st.spinner("Generando reporte PDF..."):
                            # Asegurar que las observaciones no sean None
                            obs_generales = observaciones_generales or "Sin observaciones"
                            
                            # Generar el PDF
                            pdf_bytes = generate_pdf_report(
                                empresa,
                                estadisticas,
                                ultimo_formulario["preguntas"],
                                obs_generales
                            )
                            # Crear enlace de descarga
                            b64 = base64.b64encode(pdf_bytes).decode()
                            href = f'<a href="data:application/octet-stream;base64,{b64}" download="reporte_{empresa["ruc"]}_{datetime.now().strftime("%Y%m%d")}.pdf">Descargar Reporte PDF</a>'
                
                            st.markdown(href, unsafe_allow_html=True)
                            st.success("‚úÖ Reporte PDF generado exitosamente")
                            st.balloons() 
                        
                            
                            
                            # Crear enlace de descarga
                            #b64 = base64.b64encode(pdf_bytes).decode()
                            #href = f'<a href="data:application/octet-stream;base64,{b64}" download="reporte_{empresa["ruc"]}_{datetime.now().strftime("%Y%m%d")}.pdf">Descargar Reporte PDF</a>'
                            
                            #st.markdown(href, unsafe_allow_html=True)
                            #st.success("‚úÖ Reporte PDF generado exitosamente")
                            #st.balloons()

                with export_col2:
                    # Exportar datos a Excel
                    if st.button("üìä Exportar a Excel", use_container_width=True):
                        with st.spinner("Preparando datos para Excel..."):
                            # Crear DataFrame con los datos del reporte
                            report_data = []
                            
                            for pregunta in ultimo_formulario["preguntas"]:
                                report_data.append({
                                    "Secci√≥n": pregunta["seccion"],
                                    "Categor√≠a": pregunta["categoria"],
                                    "Pregunta": pregunta["pregunta"],
                                    "Normativa": pregunta["normativa"],
                                    "Resultado": pregunta["respuesta"],
                                    "Observaciones": pregunta["observaciones"]
                                })
                            
                            df_report = pd.DataFrame(report_data)
                            
                            # Crear archivo Excel en memoria
                            output = BytesIO()
                            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                                df_report.to_excel(writer, sheet_name='Reporte', index=False)
                            
                            excel_data = output.getvalue()
                            b64 = base64.b64encode(excel_data).decode()
                            href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="reporte_{empresa["ruc"]}_{datetime.now().strftime("%Y%m%d")}.xlsx">Descargar Reporte Excel</a>'
                            
                            st.markdown(href, unsafe_allow_html=True)
                            st.success("‚úÖ Datos preparados para exportar a Excel")
                
                # Resumen ejecutivo
                st.markdown("---")
                st.subheader("üìã Resumen Ejecutivo")
                
                # Calcular resumen de cumplimiento
                cumplimiento_total = estadisticas['cumplimiento_promedio']
                total_no_conformidades = sum(sec['no_cumple'] for sec in estadisticas['secciones'].values())
                
                if cumplimiento_total >= 80:
                    st.success(f"üåü Excelente cumplimiento general: {cumplimiento_total}%")
                    st.markdown("""
                    La empresa muestra un alto nivel de cumplimiento con las normativas de seguridad y salud en el trabajo. 
                    Se recomienda mantener las buenas pr√°cticas y realizar revisiones peri√≥dicas para asegurar la continuidad.
                    """)
                elif cumplimiento_total >= 50:
                    st.warning(f"‚ö†Ô∏è Cumplimiento moderado: {cumplimiento_total}%")
                    st.markdown(f"""
                    La empresa tiene un nivel de cumplimiento aceptable pero con {total_no_conformidades} no conformidades identificadas. 
                    Se recomienda:
                    - Priorizar la correcci√≥n de las no conformidades cr√≠ticas
                    - Implementar un plan de mejora continua
                    - Capacitar al personal en las √°reas con menor cumplimiento
                    """)
                else:
                    st.error(f"üö® Bajo cumplimiento: {cumplimiento_total}%")
                    st.markdown(f"""
                    Se han identificado {total_no_conformidades} no conformidades que requieren atenci√≥n inmediata. 
                    Acciones recomendadas:
                    - Elaborar un plan de acci√≥n correctivo urgente
                    - Asignar recursos para abordar las deficiencias
                    - Solicitar asesor√≠a especializada si es necesario
                    - Programar una re-inspecci√≥n en el corto plazo
                    """)
                
            else:
                st.warning("‚ö†Ô∏è No hay suficientes datos para generar un reporte completo")
                st.info("Complete al menos una verificaci√≥n para generar reportes detallados")
                
        except requests.exceptions.RequestException as e:
            st.error(f"üî¥ Error de conexi√≥n: {str(e)}")
            st.warning("Verifique su conexi√≥n a internet o intente nuevamente m√°s tarde")
            
    else:
        st.warning("üëà Seleccione una empresa primero en la p√°gina de Formulario de Verificaci√≥n")
        st.button("Ir a Formulario de Verificaci√≥n", on_click=lambda: st.session_state.update({"current_page": "formulario_verificacion"}))

# Menu principal
if not st.session_state.logged_in:
    login_page()
else:
    if st.session_state.current_page == "dashboard":
        dashboard_page()
    elif st.session_state.current_page == "gestion_empresas":
        gestion_empresas_page()
    elif st.session_state.current_page == "formulario_verificacion":
        formulario_verificacion_page()
    elif st.session_state.current_page == "reportes":
        reportes_page()

